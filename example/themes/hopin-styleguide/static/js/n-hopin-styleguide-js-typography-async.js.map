{"version":3,"file":"n-hopin-styleguide-js-typography-async.js","sources":["../../../src/static/js/n-hopin-styleguide-js-typography-async.ts"],"sourcesContent":["const CONTAINER_SELECTOR = '.n-hopin-styleguide-js-typography';\nconst ORIG_TEXT_ATTRIB = 'n-hopin-styleguide-typograhy_orig_text';\nconst DETAILS_CLASS_SELECTOR = 'n-hopin-styleguide-js-font-details';\n\nclass Typography {\n    container: HTMLElement;\n    canvas1: HTMLCanvasElement;\n    canvas2: HTMLCanvasElement\n\n    constructor() {\n        this.container = document.querySelector(CONTAINER_SELECTOR) as HTMLElement;\n        this.canvas1 = this.createCanvas();\n        this.canvas2 = this.createCanvas();\n\n        document.body.appendChild(this.canvas1);\n        document.body.appendChild(this.canvas2);\n    }\n\n    createCanvas(): HTMLCanvasElement {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = 100;\n        canvas.height = 100;\n        canvas.style.display = 'none';\n        canvas.style.visibility = 'hidden';\n        return canvas;\n    }\n\n    updateTypeInfo() {\n        for (const e of this.container.children) {\n            let elementToCheck = e;\n            if (e.childElementCount > 0) {\n                elementToCheck = e.children[0];\n            }\n\n            const eStyles = window.getComputedStyle(elementToCheck);\n            const currentFont = this.getCurrentFont(eStyles.fontFamily);\n            \n            // TODO Find out which font is actually in use\n            const detailText = `: ${currentFont} ${eStyles.fontWeight}, ${eStyles.fontSize}`;\n\n            if (elementToCheck === e) {\n                let origText = elementToCheck.getAttribute(ORIG_TEXT_ATTRIB);\n                if (!origText) {\n                    origText = elementToCheck.textContent;\n                    elementToCheck.setAttribute(ORIG_TEXT_ATTRIB, origText);\n                    elementToCheck.textContent = `${origText}${detailText}`\n                }\n            } else {\n                let span = e.querySelector(`.${DETAILS_CLASS_SELECTOR}`);\n                if (!span) {\n                    span = document.createElement('span');\n                    span.classList.add(DETAILS_CLASS_SELECTOR);\n                    e.appendChild(span);\n                }\n                span.textContent = detailText;\n            }\n        }\n    }\n\n    getCurrentFont(fontFamily: string) {\n        const individualFonts = fontFamily.split(\",\").map((f) => f.trim());\n        for (const f of individualFonts) {\n            if (this.isfontUsed(f)) {\n                return f;\n            }\n        }\n        return '<Browser Default>';\n    }\n\n    isfontUsed(f: string) {\n        const imgData1 = this.printText(this.canvas1, \"Test.\", [f, \"serif\"]);\n        const imgData2 = this.printText(this.canvas2, \"Test.\", [f, \"sans-serif\"]);\n\n        return this.isImgDataMatching(imgData1, imgData2);\n    }\n\n    isImgDataMatching(data1: ImageData, data2: ImageData): boolean {\n        if (data1.data.length != data2.data.length) {\n            return false;\n        }\n\n        for (let i = 0; i < data1.data.length; i++) {\n            if (data1.data[i] != data2.data[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    printText(canvas: HTMLCanvasElement, text: string, fonts: string[]): ImageData {\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        ctx.font = `40px ${fonts.join(\", \")}`;\n        ctx.textAlign = \"center\"; \n        ctx.fillText(text, 50, 50);\n\n        return ctx.getImageData(0, 0, canvas.width, canvas.height);\n    }\n}\n\nwindow.addEventListener('load', () => {\n    if (!document.querySelector(CONTAINER_SELECTOR)) {\n        return\n    }\n\n    const t = new Typography();\n    t.updateTypeInfo();\n    setInterval(() => {\n        t.updateTypeInfo();\n    }, 1000);\n});"],"names":["Typography","[object Object]","this","container","document","querySelector","canvas1","createCanvas","canvas2","body","appendChild","canvas","createElement","width","height","style","display","visibility","e","children","elementToCheck","childElementCount","eStyles","window","getComputedStyle","detailText","getCurrentFont","fontFamily","fontWeight","fontSize","origText","getAttribute","textContent","setAttribute","span","classList","add","individualFonts","split","map","f","trim","isfontUsed","imgData1","printText","imgData2","isImgDataMatching","data1","data2","data","length","i","text","fonts","ctx","getContext","clearRect","font","join","textAlign","fillText","getImageData","addEventListener","t","updateTypeInfo","setInterval"],"mappings":"yBAIA,MAAMA,EAKFC,cACIC,KAAKC,UAAYC,SAASC,cAVP,qCAWnBH,KAAKI,QAAUJ,KAAKK,eACpBL,KAAKM,QAAUN,KAAKK,eAEpBH,SAASK,KAAKC,YAAYR,KAAKI,SAC/BF,SAASK,KAAKC,YAAYR,KAAKM,SAGnCP,eACI,MAAMU,EAASP,SAASQ,cAAc,UAKtC,OAJAD,EAAOE,MAAQ,IACfF,EAAOG,OAAS,IAChBH,EAAOI,MAAMC,QAAU,OACvBL,EAAOI,MAAME,WAAa,SACnBN,EAGXV,iBACI,IAAK,MAAMiB,KAAKhB,KAAKC,UAAUgB,SAAU,CACrC,IAAIC,EAAiBF,EACjBA,EAAEG,kBAAoB,IACtBD,EAAiBF,EAAEC,SAAS,IAGhC,MAAMG,EAAUC,OAAOC,iBAAiBJ,GAIlCK,EAAa,KAHCvB,KAAKwB,eAAeJ,EAAQK,eAGTL,EAAQM,eAAeN,EAAQO,WAEtE,GAAIT,IAAmBF,EAAG,CACtB,IAAIY,EAAWV,EAAeW,aAxCrB,0CAyCJD,IACDA,EAAWV,EAAeY,YAC1BZ,EAAea,aA3CV,yCA2CyCH,GAC9CV,EAAeY,YAAc,GAAGF,IAAWL,SAE5C,CACH,IAAIS,EAAOhB,EAAEb,cAAc,uCACtB6B,IACDA,EAAO9B,SAASQ,cAAc,QAC9BsB,EAAKC,UAAUC,IAjDJ,sCAkDXlB,EAAER,YAAYwB,IAElBA,EAAKF,YAAcP,IAK/BxB,eAAe0B,GACX,MAAMU,EAAkBV,EAAWW,MAAM,KAAKC,IAAKC,GAAMA,EAAEC,QAC3D,IAAK,MAAMD,KAAKH,EACZ,GAAInC,KAAKwC,WAAWF,GAChB,OAAOA,EAGf,MAAO,oBAGXvC,WAAWuC,GACP,MAAMG,EAAWzC,KAAK0C,UAAU1C,KAAKI,QAAS,QAAS,CAACkC,EAAG,UACrDK,EAAW3C,KAAK0C,UAAU1C,KAAKM,QAAS,QAAS,CAACgC,EAAG,eAE3D,OAAOtC,KAAK4C,kBAAkBH,EAAUE,GAG5C5C,kBAAkB8C,EAAkBC,GAChC,GAAID,EAAME,KAAKC,QAAUF,EAAMC,KAAKC,OAChC,OAAO,EAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAME,KAAKC,OAAQC,IACnC,GAAIJ,EAAME,KAAKE,IAAMH,EAAMC,KAAKE,GAC5B,OAAO,EAIf,OAAO,EAGXlD,UAAUU,EAA2ByC,EAAcC,GAC/C,MAAMC,EAAM3C,EAAO4C,WAAW,MAO9B,OANAD,EAAIE,UAAU,EAAG,EAAG7C,EAAOE,MAAOF,EAAOG,QAEzCwC,EAAIG,KAAO,QAAQJ,EAAMK,KAAK,QAC9BJ,EAAIK,UAAY,SAChBL,EAAIM,SAASR,EAAM,GAAI,IAEhBE,EAAIO,aAAa,EAAG,EAAGlD,EAAOE,MAAOF,EAAOG,SAI3DS,OAAOuC,iBAAiB,OAAQ,KAC5B,IAAK1D,SAASC,cAvGS,qCAwGnB,OAGJ,MAAM0D,EAAI,IAAI/D,EACd+D,EAAEC,iBACFC,YAAY,KACRF,EAAEC,kBACH"}